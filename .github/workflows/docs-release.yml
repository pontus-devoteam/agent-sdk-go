name: Release Documentation

on:
  release:
    types: [published]

jobs:
  generate-docs:
    name: Generate and Deploy Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Fix Go module setup
        run: |
          if [ -f go.mod ]; then
            mv go.mod go.mod.bak
          fi
          go mod init github.com/pontus-devoteam/agent-sdk-go
          go mod tidy

      - name: Install pkgsite (modern godoc)
        run: go install golang.org/x/pkgsite/cmd/pkgsite@latest

      - name: Generate documentation
        run: |
          mkdir -p docs-output
          cd docs-output
          
          # Run pkgsite (modern godoc tool) to generate documentation
          $(go env GOPATH)/bin/pkgsite -open=false -http=:6060 &
          PID=$!
          
          # Give the server time to start
          sleep 5
          
          # Fetch the documentation HTML
          mkdir -p api-docs
          wget -r -np -k -p -P api-docs http://localhost:6060/github.com/pontus-devoteam/agent-sdk-go
          
          # Stop the server
          kill $PID
          
          # Clean up file paths
          find api-docs -type f -name "*.html" -exec sed -i 's|http://localhost:6060/|/|g' {} \;
          
          echo "Documentation generated successfully!"

      - name: Process documentation for React
        run: |
          # Create package metadata JSON
          cd docs-output
          
          # Copy the godoc-config.json file
          cp ../docs/godoc-config.json .
          
          # Create version-specific metadata
          cat > package-metadata.json << EOF
          {
            "name": "agent-sdk-go",
            "version": "${GITHUB_REF#refs/tags/}",
            "generated_date": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "repository": "https://github.com/pontus-devoteam/agent-sdk-go",
            "release_notes_url": "https://github.com/pontus-devoteam/agent-sdk-go/releases/tag/${GITHUB_REF#refs/tags/}"
          }
          EOF
          
          # Extract Go version information
          go version > go-version.txt
          
          # Extract list of all packages
          find ../pkg -type d | grep -v "/\." | sort > package-list.txt
          
          # Create a bundle for the React site
          tar -czf godoc-output.tar.gz api-docs package-metadata.json godoc-config.json go-version.txt package-list.txt

      - name: Checkout React website repo
        uses: actions/checkout@v4
        with:
          repository: pontus-devoteam/agent-sdk-website # Replace with your actual React repo
          token: ${{ secrets.WEBSITE_REPO_TOKEN }} # Create this secret in your repo settings
          path: website

      - name: Update website documentation
        run: |
          # Extract version from release tag
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Create directories for API docs
          mkdir -p website/public/docs/api/$VERSION
          
          # Extract documentation to the website directory
          tar -xzf docs-output/godoc-output.tar.gz -C website/public/docs/api/$VERSION
          
          # Update latest version symlink
          cd website/public/docs/api
          rm -f latest
          ln -s $VERSION latest
          
          # Update versions list JSON
          if [ -f versions.json ]; then
            # Add the new version to the existing list
            TMP=$(mktemp)
            jq --arg ver "$VERSION" --arg date "$(date -u +'%Y-%m-%d')" '.versions += [{"version": $ver, "date": $date}]' versions.json > $TMP
            mv $TMP versions.json
          else
            # Create a new versions list
            cat > versions.json << EOF
          {
            "versions": [
              {
                "version": "$VERSION",
                "date": "$(date -u +'%Y-%m-%d')"
              }
            ]
          }
          EOF
          fi

      - name: Commit and push documentation
        run: |
          cd website
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are changes
          if git status --porcelain | grep -q '^'; then
            git add public/docs
            git commit -m "Update API documentation for version ${GITHUB_REF#refs/tags/}"
            git push
            echo "Documentation updated in website repository!"
          else
            echo "No changes to commit."
          fi

      # Optional: Trigger website rebuild if needed
      - name: Trigger website rebuild
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.WEBSITE_REPO_TOKEN }}
          repository: pontus-devoteam/agent-sdk-website # Replace with your actual React repo
          event-type: update-documentation
          client-payload: '{"version": "${{ github.ref_name }}"}' 